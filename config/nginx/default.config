server {                                  
    ! 定义一个虚拟主机（server块）
    listen 80;                            
    ! 监听80端口（HTTP）
    server_name localhost;                
    ! 服务器域名（此处为本机）

    # 前端静态文件服务
    location / {                          
        ! 匹配所有根路径请求（如 `/`）
        root /usr/share/nginx/html;       
        ! 静态文件根目录（容器内路径）
        index index.html;                 
        ! 默认首页文件
        try_files $uri $uri/ /index.html; 
        ! 尝试按顺序寻找文件，若失败则返回index.html
    }

    # 后端API代理
    location /api/ {                                    !
        ! 匹配所有以 `/api/` 开头的请求
        proxy_pass http://backend:3000/;                
        ! 将请求转发到后端服务（`backend`为容器名）
        proxy_set_header Host $host;                    
        ! 传递客户端原始Host信息
        proxy_set_header X-Real-IP $remote_addr;         
        ! 传递客户端真实IP
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # 客户端IP链
        proxy_set_header X-Forwarded-Proto $scheme;      
        ! # 传递协议（HTTP/HTTPS）
    }
}




! 前端代码写法：axios.get('/api/users')
! 浏览器实际请求的是 http://localhost/api/users（假设前端部署在 localhost）。
! Nginx 配置解析：
! location /api/ {
!   proxy_pass http://backend:3000/;  # 末尾的 `/` 是关键！
! }
! 路径重写规则：
! 当请求 http://localhost/api/users 时，Nginx 会移除 /api/ 前缀，将请求转发到 http://backend:3000/users。


! 前端路径代理：

! 前端写 /api/xxx → Nginx 转发到 http://backend:3000/xxx。

! 后端需监听 /xxx 路径（如 /users）。
! Header 传递方向：

! 所有 proxy_set_header 均用于向后端传递客户端原始信息。
! localhost 解析逻辑：

! 浏览器中指向本机，Docker 中通过容器名 backend 解析到后端服务。